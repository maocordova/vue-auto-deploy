name: Deploy Vue App

on:
  push:
    branches: [ main, develop ]

env:
    SERVER_IP: ${{ secrets.SERVER_IP }}
    SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}

jobs:
  create-deployment-artifact:
    name: "Create deployment artifact"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure Node 12 
        uses: actions/setup-node@v2
        with:
          node-version: 12.x

      - name: Create env file
        run: | 
          touch .env
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            printf "%s" "${{ secrets.PRODUCTION_ENV }}" > ".env"
          else
            printf "%s" "${{ secrets.TEST_ENV }}" > ".env"
          fi

      - run: npm install

      - run: npm run build

      - name: Create artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}".tar.gz dist

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v2
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

  upload-release-to-server:
    name: "Compress and upload release"
    runs-on: ubuntu-latest
    needs: create-deployment-artifact
    steps:
      - name: Check Environment
        run: | 
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "Deploying to production"
            echo "SERVER_IP=${{ secrets.SERVER_PROD_IP }}" >> $GITHUB_ENV
            echo "SERVER_PASSWORD=${{ secrets.SERVER_PROD_PASSWORD }}" >> $GITHUB_ENV
          else
            echo "Deploying to test"
          fi
      - uses: actions/download-artifact@v2
        with:
          name: app-build

      - name: Upload to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ env.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          source: ${{ github.sha }}.tar.gz
          target: /tmp/artifacts

  deploy-release-on-server:
    name: "Deploy release"
    runs-on: ubuntu-latest
    needs: upload-release-to-server
    steps:
      - name: Check Environment
        run: | 
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "Deploying to production"
            echo "SERVER_IP=${{ secrets.SERVER_PROD_IP }}" >> $GITHUB_ENV
            echo "SERVER_PASSWORD=${{ secrets.SERVER_PROD_PASSWORD }}" >> $GITHUB_ENV
          else
            echo "Deploying to test"              
          fi

      - name: Extract files and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ env.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          envs: GITHUB_SHA
          script: |
            # Extract the tar file into our release directory
            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S mkdir -p "${{ secrets.SERVER_DEPLOY_PATH }}"
            # Extract the tar file into our release directory
            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S tar xzf /tmp/artifacts/${GITHUB_SHA}.tar.gz -C "${{ secrets.SERVER_DEPLOY_PATH }}"

  clean-up:
    name: "Clean up temp folders"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifact, upload-release-to-server, deploy-release-on-server ]
    steps:
      - name: Check Environment
        run: | 
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "Deploying to production"
            echo "SERVER_IP=${{ secrets.SERVER_PROD_IP }}" >> $GITHUB_ENV
            echo "SERVER_PASSWORD=${{ secrets.SERVER_PROD_PASSWORD }}" >> $GITHUB_ENV
          else
            echo "Deploying to test"            
          fi    
      - name: Cleaning up
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ env.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            rm -rf /tmp/artifacts
